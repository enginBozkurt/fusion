// Generated by gencpp from file fusion/single_val.msg
// DO NOT EDIT!


#ifndef FUSION_MESSAGE_SINGLE_VAL_H
#define FUSION_MESSAGE_SINGLE_VAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fusion
{
    template <class ContainerAllocator>
    struct single_val_
    {
        typedef single_val_<ContainerAllocator> Type;

        single_val_()
                : header()
                , val(0.0)  {
        }
        single_val_(const ContainerAllocator& _alloc)
                : header(_alloc)
                , val(0.0)  {
            (void)_alloc;
        }



        typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
        _header_type header;

        typedef double _val_type;
        _val_type val;





        typedef boost::shared_ptr< ::fusion::single_val_<ContainerAllocator> > Ptr;
        typedef boost::shared_ptr< ::fusion::single_val_<ContainerAllocator> const> ConstPtr;

    }; // struct single_val_

    typedef ::fusion::single_val_<std::allocator<void> > single_val;

    typedef boost::shared_ptr< ::fusion::single_val > single_valPtr;
    typedef boost::shared_ptr< ::fusion::single_val const> single_valConstPtr;

// constants requiring out of line definition



    template<typename ContainerAllocator>
    std::ostream& operator<<(std::ostream& s, const ::fusion::single_val_<ContainerAllocator> & v)
    {
        ros::message_operations::Printer< ::fusion::single_val_<ContainerAllocator> >::stream(s, "", v);
        return s;
    }


    template<typename ContainerAllocator1, typename ContainerAllocator2>
    bool operator==(const ::fusion::single_val_<ContainerAllocator1> & lhs, const ::fusion::single_val_<ContainerAllocator2> & rhs)
    {
        return lhs.header == rhs.header &&
               lhs.val == rhs.val;
    }

    template<typename ContainerAllocator1, typename ContainerAllocator2>
    bool operator!=(const ::fusion::single_val_<ContainerAllocator1> & lhs, const ::fusion::single_val_<ContainerAllocator2> & rhs)
    {
        return !(lhs == rhs);
    }


} // namespace fusion

namespace ros
{
    namespace message_traits
    {





        template <class ContainerAllocator>
        struct IsFixedSize< ::fusion::single_val_<ContainerAllocator> >
                : FalseType
        { };

        template <class ContainerAllocator>
        struct IsFixedSize< ::fusion::single_val_<ContainerAllocator> const>
                : FalseType
        { };

        template <class ContainerAllocator>
        struct IsMessage< ::fusion::single_val_<ContainerAllocator> >
                : TrueType
        { };

        template <class ContainerAllocator>
        struct IsMessage< ::fusion::single_val_<ContainerAllocator> const>
                : TrueType
        { };

        template <class ContainerAllocator>
        struct HasHeader< ::fusion::single_val_<ContainerAllocator> >
                : TrueType
        { };

        template <class ContainerAllocator>
        struct HasHeader< ::fusion::single_val_<ContainerAllocator> const>
                : TrueType
        { };


        template<class ContainerAllocator>
        struct MD5Sum< ::fusion::single_val_<ContainerAllocator> >
        {
            static const char* value()
            {
                return "0d7551a92ccd54f95aa2740c22e5d9b9";
            }

            static const char* value(const ::fusion::single_val_<ContainerAllocator>&) { return value(); }
            static const uint64_t static_value1 = 0x0d7551a92ccd54f9ULL;
            static const uint64_t static_value2 = 0x5aa2740c22e5d9b9ULL;
        };

        template<class ContainerAllocator>
        struct DataType< ::fusion::single_val_<ContainerAllocator> >
        {
            static const char* value()
            {
                return "fusion/single_val";
            }

            static const char* value(const ::fusion::single_val_<ContainerAllocator>&) { return value(); }
        };

        template<class ContainerAllocator>
        struct Definition< ::fusion::single_val_<ContainerAllocator> >
        {
            static const char* value()
            {
                return "std_msgs/Header header\n"
                       "float64 val\n"
                       "\n"
                       "================================================================================\n"
                       "MSG: std_msgs/Header\n"
                       "# Standard metadata for higher-level stamped data types.\n"
                       "# This is generally used to communicate timestamped data \n"
                       "# in a particular coordinate frame.\n"
                       "# \n"
                       "# sequence ID: consecutively increasing ID \n"
                       "uint32 seq\n"
                       "#Two-integer timestamp that is expressed as:\n"
                       "# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
                       "# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
                       "# time-handling sugar is provided by the client library\n"
                       "time stamp\n"
                       "#Frame this data is associated with\n"
                       "string frame_id\n"
                        ;
            }

            static const char* value(const ::fusion::single_val_<ContainerAllocator>&) { return value(); }
        };

    } // namespace message_traits
} // namespace ros

namespace ros
{
    namespace serialization
    {

        template<class ContainerAllocator> struct Serializer< ::fusion::single_val_<ContainerAllocator> >
        {
            template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
            {
                stream.next(m.header);
                stream.next(m.val);
            }

            ROS_DECLARE_ALLINONE_SERIALIZER
        }; // struct single_val_

    } // namespace serialization
} // namespace ros

namespace ros
{
    namespace message_operations
    {

        template<class ContainerAllocator>
        struct Printer< ::fusion::single_val_<ContainerAllocator> >
        {
            template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fusion::single_val_<ContainerAllocator>& v)
            {
                s << indent << "header: ";
                s << std::endl;
                Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
                s << indent << "val: ";
                Printer<double>::stream(s, indent + "  ", v.val);
            }
        };

    } // namespace message_operations
} // namespace ros

#endif // FUSION_MESSAGE_SINGLE_VAL_H
